{"version":3,"file":"static/js/360.db463f3a.chunk.js","mappings":"qNAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAEvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAInBC,GAAyBC,EAAAA,EAAAA,IACpC,CAACT,EAHyB,SAAAC,GAAK,OAAIA,EAAMS,OAAOC,KAAjB,IAI/B,SAACT,EAAUQ,GACT,OAAOR,EAASQ,QAAO,SAAAE,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASL,EAAOI,cADf,GAG/B,I,8BCXUE,EAAU,SAAC,GAAiB,IAAfJ,EAAc,EAAdA,QAClBK,GAAWC,EAAAA,EAAAA,MAIjB,OACE,iCACE,yBAAIN,EAAQC,KAAZ,QACA,uBAAID,EAAQO,UACZ,SAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,KAAK,SAASC,QAN7B,kBAAMN,GAASO,EAAAA,EAAAA,IAAcZ,EAAQa,IAArC,EAMb,sBAKL,EClBD,EAA2B,8BCIdC,EAAc,WACzB,IAAMxB,GAAWyB,EAAAA,EAAAA,IAAYnB,GAE7B,OACsB,IAApBN,EAAS0B,SACP,wBACG1B,EAAS2B,KAAI,SAAAjB,GAAO,OACnB,eAAqBkB,UAAWC,EAAhC,UACE,SAACf,EAAD,CAASJ,QAASA,KADXA,EAAQa,GADE,KAQ5B,EClBD,EAAuB,0BAAvB,EAAyD,2BAAzD,EAA0F,yBCK7EO,EAAc,WACzB,IAAMf,GAAWC,EAAAA,EAAAA,MACXhB,GAAWyB,EAAAA,EAAAA,IAAY3B,GAuB7B,OACE,kBAAM8B,UAAWC,EAAUE,SAtBJ,SAAAC,GACvBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,OAMjB,GAJmBnC,EAASoC,MAC1B,SAAA1B,GAAO,OAAIA,EAAQC,OAASuB,EAAKG,SAAS1B,KAAKF,KAAxC,IAIP,OAAO6B,MAAM,GAAD,OAAIJ,EAAKG,SAAS1B,KAAKF,MAAvB,4BAEZM,GACEwB,EAAAA,EAAAA,IAAW,CACT5B,KAAMuB,EAAKG,SAAS1B,KAAKF,MACzBQ,OAAQiB,EAAKG,SAASpB,OAAOR,SAGjCyB,EAAKM,OAER,EAGC,WACE,mBAAOZ,UAAWC,EAAlB,kBAEE,kBACET,KAAK,OACLT,KAAK,OACL8B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOf,UAAWC,EAAlB,oBAEE,kBACET,KAAK,MACLT,KAAK,SACL8B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQf,UAAWC,EAAST,KAAK,SAAjC,2BAKL,E,UCzDD,EAAyB,uBCGZwB,EAAS,WACpB,IAAM7B,GAAWC,EAAAA,EAAAA,MAMjB,OACE,mBAAOY,UAAWC,EAAlB,mCAEE,kBAAOT,KAAK,OAAOyB,SAPI,SAAAb,GACzBjB,GAAS+B,EAAAA,EAAAA,GAAad,EAAIe,cAActC,OACzC,MAQF,ECaD,EAtBiB,WACf,IAAMM,GAAWC,EAAAA,EAAAA,MACXb,GAAYsB,EAAAA,EAAAA,IAAYvB,GACxBG,GAAQoB,EAAAA,EAAAA,IAAYrB,GAM1B,OAJA4C,EAAAA,EAAAA,YAAU,WACRjC,GAASkC,EAAAA,EAAAA,MACV,GAAE,CAAClC,KAGF,4BACE,uCACA,SAACe,EAAD,KAEA,sCACA,SAACc,EAAD,IACCzC,IAAcE,IAAS,mDACxB,SAACmB,EAAD,MAGL,C","sources":["redux/contacts/selectors.jsx","components/Contact/Contact.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.value;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const onDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <>\n      <p>{contact.name}:</p>\n      <p>{contact.number}</p>\n      <Button variant=\"contained\" type=\"button\" onClick={onDelete}>\n        Delete\n      </Button>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"ContactList_listItem__SptUx\",\"listName\":\"ContactList_listName__f7TzU\"};","import { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { Contact } from 'components/Contact/Contact';\nimport css from './ContactList.module.css';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n\n  return (\n    contacts.length !== 0 && (\n      <ul>\n        {contacts.map(contact => (\n          <li key={contact.id} className={css.listItem}>\n            <Contact contact={contact} />\n          </li>\n        ))}\n      </ul>\n    )\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"field\":\"ContactForm_field__DAXEv\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleFormSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n\n    const repeatName = contacts.find(\n      contact => contact.name === form.elements.name.value\n    );\n\n    if (repeatName) {\n      return alert(`${form.elements.name.value} is already in contacts`);\n    } else {\n      dispatch(\n        addContact({\n          name: form.elements.name.value,\n          number: form.elements.number.value,\n        })\n      );\n      form.reset();\n    }\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleFormSubmit}>\n      <label className={css.field}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.field}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = evt => {\n    dispatch(changeFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <lable className={css.filter}>\n      Find contacts by name\n      <input type=\"text\" onChange={handleFilterChange}></input>\n    </lable>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","value","contact","name","toLowerCase","includes","Contact","dispatch","useDispatch","number","Button","variant","type","onClick","deleteContact","id","ContactList","useSelector","length","map","className","css","ContactForm","onSubmit","evt","preventDefault","form","target","find","elements","alert","addContact","reset","pattern","title","required","Filter","onChange","changeFilter","currentTarget","useEffect","fetchContacts"],"sourceRoot":""}